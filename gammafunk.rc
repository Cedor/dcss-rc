# Crawl Init file

###################
### RandomTiles ###
###################

## To set up RandomTiles, you need (1) the includes below and (2) to add/modify
## the ready() function in your rc. See my ready() section below and the
## project page: https://github.com/gammafunk/RandomTiles

include += PlayerTiles.rc
include += RandomTiles.rc

##############################
### Tiles and view options ###
##############################

tile_window_width = 1300
tile_window_height = 700
tile_full_screen = false
#tile_player_tile = playermons
show_player_species = true
view_delay = 300
bindkey = [~] CMD_LUA_CONSOLE

######################
### Morgue options ###
######################

dump_message_count = 30
dump_order  = header,hiscore,stats,misc,mutations,skills,spells,inventory
dump_order += screenshot,monlist,messages,action_counts,vaults,notes,kills
note_hp_percent = 10
note_all_skill_levels = true
note_chat_messages = false
user_note_prefix = >>

##############################
### Travel-related options ###
##############################

travel_delay = -1
explore_delay = -1
rest_delay = -1
auto_exclude += oklob,statue,curse skull,roxanne,hyperactive,lightning spire
auto_exclude += mimic

explore_stop = items,greedy_items,greedy_pickup,greedy_pickup_gold
explore_stop += greedy_visited_item_stack,stairs,shops,altars,gates
explore_stop += greedy_sacrificeable

runrest_ignore_poison  = 2:30
runrest_ignore_monster += ^butterfly$:1
show_travel_trail = true
trapwalk_safe_hp = dart:20,needle:15,arrow:35,bolt:45,spear:40,blade:95

: if you.god() ~= "Nemelex Xobeh" and you.god() ~= "Elyvilon"
:   and you.god() ~= "No God"  then
auto_sacrifice = before_explore
: else
auto_sacrifice = true
: end

## runrest messages
stop := runrest_stop_message
stop =
ignore := runrest_ignore_message
ignore =

# Annoyances
ignore += Jiyva gurgles merrily
ignore += Jiyva appreciates your sacrifice
ignore += Jiyva says: Divide and consume
ignore += You hear.*splatter
ignore += You feel.*sick
ignore += disappears in a puff of smoke
ignore += engulfed in a cloud of smoke
ignore += standing in the rain
ignore += safely over a trap
ignore += A.*toadstool withers and dies
ignore += toadstools? grow
ignore += You walk carefully through the
ignore += grinding sound
ignore += contamination has completely
ignore += chunks of flesh in your inventory.*rotted away
ignore += lightning rod has recharged
ignore += your breath back

# Bad things
stop += found.*trap
stop += You fall through a shaft
stop += An alarm trap emits a blaring wail
stop += (blundered into a|invokes the power of) Zot
stop += A huge blade swings out and slices into you
stop += sense of stasis
stop += flesh start
stop += (starving|devoid of blood)
stop += wrath finds you
stop += lose consciousness

# Expiring effects
stop += You feel yourself slow down
stop += less insulated
stop += You are starting to lose your buoyancy
stop += You lose control over your flight
stop += Your hearing returns
stop += Your transformation is almost over
stop += back to life
stop += uncertain
stop += time is quickly running out
stop += life is in your own hands
stop += is no longer charmed

: if you.race() == "Ghoul" then
stop += smell.*(rott(ing|en)|decay)
stop += something tasty in your inventory
: end

:if you.god() == "Xom" then
stop += god:
:else
ignore += god:
:end

ignore += pray:
ignore += talk:
ignore += talk_visual:
ignore += friend_spell:
ignore += friend_enchant:
ignore += friend_action:
ignore += sound:


####################
### Menu options ###
####################

drop_filter += useless_item

### Menu colorings ###
## These should match the item_glyph colours exactly when possible.
menu := menu_colour
menu =

### General colorings ###

## These two need to come first to override any entries below.
menu += darkgrey:.*useless.*
menu += red:.*evil_item.*
menu += pickup:lightcyan:god gift
menu += inventory:white:\w \#\s
menu += notes:white:Reached XP level
menu += inventory:white:\w \+\s
menu += darkgrey:(melded)
menu += lightred: cursed
menu += inventory:lightgreen:.*equipped.*

### Food ###
menu += red:evil_eating.*chunk
menu += magenta:mutagenic.*chunk
menu += green:poisonous.*chunk
menu += darkgrey:(rotting.*chunk|inedible|rot-inducing)
menu += brown:contaminated.*chunk
menu += lightgrey: +(chunks?$|chunks? +)
menu += brown:fruit
menu += yellow:(pizza|jerky|jerkies|royal jell)
menu += lightcyan:(meat ration|bread ration)

### Potions ###
menu += darkgrey:potions? of.*(poison)
## buffs
menu += green:potions? of.*(berserk|agility|brilliance|might|flight)
menu += lightgreen:potions? of.*(resistance|invisibility|haste)
## healing
menu += brown:potions? of.*curing
menu += yellow:potions? of.*heal wounds
## "magic"
menu += magenta:potions? of.*(cancellation|ambrosia)
menu += lightmagenta:potions? of.*magic
## "really good" or restorative
menu += cyan:potions? of.*(restore abilities|cure mutation)
menu += lightcyan:potions? of.*(beneficial mutation|experience)
## food potions
: if you.race() == "Vampire" then
  menu += lightred:potions? of blood
  menu += lightgrey:potions? of coagulated blood
: else
  menu += darkgrey:potions? of.*blood
  menu += lightred:potions? of.*porridge
: end

### Scrolls ###
## "equipment/spells"
menu += brown:scroll.*(amnesia|curse)
menu += yellow:scroll.*(identify)
## Enchant
menu += green:scroll.*enchant weapon
menu += lightgreen:scroll.*(enchant armour|brand weapon|enchant weapon III)
## Escape
menu += magenta:scroll.*(fog|teleport)
menu += lightmagenta:scroll.*(fear|blink)
## Damaging scrolls
: if you.race() == "Vampire" or you.race() == "Mummy"
:   or you.race() == "Ghoul" then
  menu += blue:scroll.*(holy word)
  menu += lightred:scroll.*(torment)
: else
  menu += lightred:scroll.*(holy word)
  menu += blue:scroll.*(torment)
: end
menu += lightred:scroll.*summoning
## tactical and the really good stuff (mmap for speedruns)
menu += cyan:scroll.*(silence|noise|vulnerability|immolation)
menu += lightcyan:scroll.*(acquire|recharging|magic map)

### Wands ###
menu += lightcyan:wand of.*heal wounds
## hexes
menu += green:wand of.*(slowing|confusion|random effects)
menu += lightgreen:wand of.*(polymorph|paralysis|enslavement)
## escape
menu += magenta:wand of.*(digging|disintegration|teleportation)
menu += lightmagenta:wand of.*(hasting|invisibility)
## damage
menu += brown:wand of.*(flame|frost|magic dart)
menu += yellow:wand of.*(lightning|draining|cold|fire)
menu += blue:.*dangerous_item.*

## Identification
menu += lightmagenta:unidentified.*artefact.*jewellery
menu += white:.*artefact
menu += lightblue:unidentified .*(potion|scroll|wand|jewellery|book|rod|magical staff)
menu += magenta:.*known.*ring of (dexterity|strength|intelligence|slaying|evasion|protection(?! from))
menu += inventory:lightgray:.*(book|jewellery|magical staff)

menu += lightblue:unidentified .*weapon.*(runed|glowing|enchanted)
menu += lightblue:unidentified .*armour.*(runed|glowing|embroidered|shiny|dyed)

prefer_safe_chunks     = true
show_inventory_weights = true
auto_drop_chunks       = yes
sort_menus += inv: true : equipped, freshness, charged

########################
### Glyphs and colors ##
########################

item := item_glyph

## Reasonable defaults
item += potion:lightgrey
item += scroll:lightgrey
item += dangerous_item:blue

### Potions ###
item += potions? of.*(poison):darkgrey
item += potions? of.*(berserk|agility|brilliance|might|flight):green
item += potions? of.*(resistance|invisibility|haste):lightgreen
item += potions? of.*(cancellation|ambrosia):magenta
item += potions? of.*magic:lightmagenta
item += potions? of.*heal wounds:yellow
item += potions? of.*curing:brown
item += potions? of.*(restore abilities|cure mutation):cyan
item += potions? of.*(beneficial mutation|experience):lightcyan
: if you.race() == "Vampire" then
  item += potions? of blood:lightred
  item += potions? of coagulated blood:lightgrey
  item += potions? of.*porridge:darkgrey
: else
  item += potions? of.*porridge:lightred
  item += potions? of.*blood:darkgrey
: end

### Scrolls ###
item += scroll.*(amnesia|curse):brown
item += scroll.*identify:yellow
item += scroll.*enchant weapon:green
item += scroll.*(enchant armour|brand weapon|enchant weapon III):lightgreen
item += scroll.*(fog|teleport):magenta
item += scroll.*(fear|blink):lightmagenta
: if you.race() == "Vampire" or you.race() == "Mummy"
:  or you.race() == "Ghoul" then
  item += scroll.*(holy word):red
  item += scroll.*(torment):lightred
: else
  item += scroll.*(holy word):lightred
  item += scroll.*(torment):red
: end
item += scroll.*(summoning):lightred
item += scroll.*(vulnerability|noise|silence|immolation):cyan
item += scroll.*(acquire|recharging|magic map):lightcyan

item += ( rod ):yellow

### Identification
item += (book|jewellery|magical staff):brown
item += unidentified.*(potion|scroll|jewellery|book|wand|rod|magical staff).*:lightblue
item += known.*ring of (dexterity|strength|intelligence|slaying|evasion|protection(?! from)):magenta
item += identified.*artefact.*jewellery:white
item += unidentified.*artefact.*jewellery.*:lightmagenta
item += (a )?stones?$:lightgray

### Food ###
item += chunks?.*flesh:lightgrey
item += contaminated.*chunk:brown
item += mutagenic.*chunk:magenta
item += evil_eating.*chunk:red
item += (inedible|rotting.*chunk):darkgrey
item += poisonous.*chunk:green
item += fruit:brown
item += (pizza|jerky|jerkies|royal jell):yellow
item += (meat ration|bread ration):lightcyan

### Wands ###
item += wand of.*heal wounds:lightcyan
item += wand of.*(slowing|confusion|random effects):green
item += wand of.*(polymorph|paralysis|enslavement):lightgreen
item += wand of.*(digging|disintegration|teleportation):magenta
item += wand of.*(hasting|invisibility):lightmagenta
item += wand of.*(flame|frost|magic dart):brown
item += wand of.*(lightning|draining|cold|fire):yellow

## Want this to override anything above
item += useless.*(food|book|potion|scroll|missile|armour|weapon|jewellery|rod):darkgrey
item += evil_item:red

## Monsters that can be easy to miss
mons := mon_glyph
mons ^= dancing weapon : cyan {
mons ^= spectral weapon : lightcyan {
mons ^= * : ✱
## For 0.16
mons ^= death cob : yellow z
mons ^= curse toe : lightgreen z
mons ^= ancient champion : lightcyan z
mons ^= curse skull : lightmagenta z

## Wall glyphs, requires a font and terminal that can render these.
feature += crystal wall {░}
## For 0.16
feature += green crystal {░}
feature += stone wall {▒}
feature += metal wall {▓}
feature += unnaturally hard rock wall {█}

feature += altar {⚑}

#########################
### Interface options ###
#########################

default_manual_training = true
show_gold_turns = true
show_game_turns = true
allow_self_target = prompt

# Spellcasting spam reduction by monqy
{
local function generic_cast_spell(cmd)
  crawl.mpr('<cyan>Cast which spell?</cyan>')
  crawl.flush_prev_message()
  crawl.process_keys(cmd)
end

function cast_spell()
  generic_cast_spell('z')
end

function force_cast_spell()
  generic_cast_spell('Z')
end
}

########################
### Auotpick options ###
########################

autopickup = $?!+"/%|\

## From
ae := autopickup_exceptions
ae += useless_item
ae += evil_item
ae += amulet of (inacc|the gourmand|controlled flight|warding|stasis|faith)
ae += amulet of (resist .*|clarity|rage|guardian spirit|conser|regeneration)
ae += ring of (fire|ice|protection from|see invisible|flight|poison|magical pow)
ae += ring of (teleport|invisibility|sustain|susten|wizardry|positive|stealth)
ae += potion of (lignification|mutation)
ae += potion of (lignification|mutation)

: if you.race() ~= "Vampire" then
ae += potion of blood
: end
ae += staff of .*

: if you.race() == "Vampire" or you.race() == "Mummy"
:   or you.race() == "Ghoul" then
  ae += scroll.*(holy word)
: else
  ae += scroll.*(torment)
: end

default_friendly_pickup = none
autopickup_no_burden = true

##############################
## Lua and ready() function ##
##############################
{

-- debug version of crawl.mpr()
function dmpr(msg)
  if not msg or msg == "" then
    return
  end
  crawl.mpr("<white>" .. msg .. "</white>")
end

---------------------------------------
---- Begin conditional force_mores ----
---------------------------------------

-- Sets up force-more messages based on hp/xl conditions, mostly to help avoid
-- speedrun splats
local last_turn = you.turns()
local force_mores = {
                  -- General early game threats
                  {pattern = "(adder|gnoll)", cond = "xl", cutoff = 2,
                   name = "XL1"},
                  {pattern = "orc wizard", cond = "maxhp", cutoff = 20},
                  {pattern = "orc priest", cond = "maxhp", cutoff = 40},
                  -- Problems for squishies
                  {pattern = "(centaur [^zs]|yaktaur|drake|dragon|blink frog" ..
                          "|torpor|spiny frog|blink frog|black mamba|hydra|spriggan" ..
                          "|alligator|snapping turtle|manticore|harpy|satyr" ..
                          "|faun|naga sharpshooter|merfolk|siren|water nymph" ..
                          "|jumping spider|naga sharpshooter|anaconda" ..
                          "|mana viper|shock serpent|guardian serpent" ..
                          "|emperor scorpion|hill giant|stone giant|titan" ..
                          "|fire giant|sphinx|frost giant|war gargoyle|vault" ..
                          "|a wizard|[0-9]+ wizards|convoker|monstrosity" ..
                          "|preserver|ogre mage|tengu reaver|deep elf" ..
                          "|octopode crusher|yaktaur captain)",
                   cond = "maxhp", cutoff = 90, name = "squishy_90hp"},
                  {pattern = "(centaur warrior|tengu reaver|octopode crusher" ..
                          "|air mage|defender|yaktaur captain|warmonger" ..
                          "|chaos champion|blood saint|black sun|balrug" ..
                          "|blizzard demon|cacodemon)",
                   cond = "maxhp", cutoff = 150, name = "squishy_150hp"}}

local active_fm = {}
-- Set to true to get a message when the fm change
local notify_fm = false
function init_force_mores()
   for i,v in ipairs(force_mores) do
       active_fm[#active_fm + 1] = false
   end
end

function update_force_mores()
   activated = {}
   deactivated = {}
   hp, maxhp = you.hp()
   for i,v in ipairs(force_mores) do
      msg = v.pattern .. ".*into view"
      action = nil
      fm_name = v.pattern
      if v.name then
         fm_name = v.name
      end 
      if not v.cond and not active_fm[i] then
         action = "+"
      elseif v.cond == "xl" then
         if active_fm[i] and you.xl() >= v.cutoff then
             action = "-"
         elseif not active_fm[i] and you.xl() < v.cutoff then
             action = "+"
         end
      elseif v.cond == "maxhp" then
         if active_fm[i] and maxhp >= v.cutoff then
             action = "-"
         elseif not active_fm[i] and maxhp < v.cutoff then
             action = "+"
         end
      elseif v.cond == "br" then
         if active_fm[i] and you.branch():lower() ~= v.value:lower() then
             action = "-"
         elseif not active_fm[i] and you.branch():lower() == v.value:lower() then
             action = "+"
         end
      end
      if action == "+" then
          activated[#activated + 1] = fm_name
      elseif action == "-" then
          deactivated[#deactivated + 1] = fm_name
      end
      if action ~= nil then
         opt = "force_more_message " .. action .. "= " .. msg
         crawl.setopt(opt)
         active_fm[i] = not active_fm[i]
      end
   end
   if #activated > 0 and notify_fm then
      crawl.mpr("<white>Activating force_mores: " ..
                table.concat(activated, ", ") .. "</white>")
   end
   if #deactivated > 0 and notify_fm then
      crawl.mpr("<white>Deactivating force_mores: " ..
                table.concat(deactivated, ", ") .. "</white>")
   end
end

local last_turn = nil
function do_force_mores()
  if last_turn ~= you.turns() then
    update_force_mores()
    last_turn = you.turns()
  end
end

init_force_mores()
-------------------------
---- End force_mores ----
-------------------------

----------------------------------------------
---- Beging Skill list setting (elliptic) ----
----------------------------------------------

skill_list = {"Fighting","Short Blades","Long Blades","Axes","Maces & Flails",
              "Polearms","Staves","Unarmed Combat","Bows","Crossbows",
              "Throwing","Slings","Armour","Dodging","Shields","Spellcasting",
              "Conjurations","Hexes","Charms","Summonings","Necromancy",
              "Translocations","Transmutations","Fire Magic","Ice Magic",
              "Air Magic","Earth Magic","Poison Magic","Invocations",
              "Evocations","Stealth"}
local need_target_skill = nil

function record_current_skills(maxlev)
  c_persist.current_skills = { }
  for _,sk in ipairs(skill_list) do
    if you.train_skill(sk) > 0 and you.base_skill(sk) < (maxlev or 27) then
      table.insert(c_persist.current_skills, sk)
    end
  end
end

function check_skills()
  if not c_persist.current_skills or not c_persist.target_skill then
    return
  end
  for _,sk in ipairs(c_persist.current_skills) do
    if you.base_skill(sk) >= c_persist.target_skill then
      crawl.formatted_mpr(sk .. " reached " .. c_persist.target_skill
                          .. ".", "prompt")
      crawl.more()
      set_new_skill_training()
      break
    end
  end
end

function init_target_skill()
  c_persist.target_skill = nill
  c_persist.current_skills = { }
  need_target_skill = true
end

function set_new_skill_training()
  init_target_skill()
  c_persist.target_skill = 0
  crawl.sendkeys("m")
end

function set_target_skill()
  record_current_skills()
  local str = "Currently training: "
  local first_skill = true
  for _,sk in ipairs(c_persist.current_skills) do
    val = you.base_skill(sk)
    if first_skill then
      str = str .. sk .. "(" .. val .. ")"
    else
      str = str .. ", " .. sk .. "(" .. val .. ")"
    end
    first_skill = false
  end
  str = str .. "."
  crawl.formatted_mpr(str, "prompt")
  crawl.formatted_mpr("Choose a target skill level: ", "prompt")
  c_persist.target_skill = tonumber(crawl.c_input_line())
  record_current_skills(c_persist.target_skill)
  -- Update the target skill for char_defaults()
  save_default_target_skill()
end

function control(c)
  return string.char(string.byte(c) - string.byte('a') + 1)
end

-- Moved this to its own function to clean up ready() -gammafunk
function target_skill()
  prev_need_target = need_target_skill
  -- Need to update target_skill at turn 0 no matter what, since it
  -- might carry from a previous game.
  if (prev_need_target == nil and you.turns() == 0)
     or c_persist.target_skill == nil then
    set_new_skill_training()
  end
  if prev_need_target then
    set_target_skill()
    need_target_skill = false
  elseif not need_target_skill then
    check_skills()
  end
end

--------------------------------
---- End Skill list setting ----
--------------------------------

------------------------------------------------
---- Begin leave message on save (elliptic) ----
------------------------------------------------

-- Leave message on save
function save_with_message()
  if you.turns() == 0 then
    crawl.sendkeys("S")
    return
  end
  crawl.formatted_mpr("Save game and exit?", "prompt")
  local res = crawl.getch()
  if not (string.char(res) == "y" or string.char(res) == "Y") then
    crawl.formatted_mpr("Okay, then.", "prompt")
    return
  end
  crawl.formatted_mpr("Leave a message: ", "prompt")
  local res = crawl.c_input_line()
  c_persist.message = res
  crawl.sendkeys(control("s"))
end

function load_message()
  if c_persist.message and c_persist.message ~= "nil"
     and c_persist.message ~= "" then
    crawl.mpr("<white>MESSAGE: " .. c_persist.message .. "</white>")
    c_persist.message = nil
  end
end

-----------------------------------
---- End leave message on save ----
-----------------------------------

------------------------
---- Begin safe eat ----
------------------------

-- Prompt when eating in LOS of charmed 1s, notably from summon greater demon,
-- since they can become hostile mid-meal.
-- Bind this to the eat key with ===safe_eat
function safe_eat()
  tier_one_demons = {["executioner"] = true, ["shadow fiend"] = true,
                     ["ice fiend"] = true, ["brimstone fiend"] = true,
                     ["hell sentinel"] = true}
  have_t1 = false
  for x = -7,7 do
    for y = -7,7 do
      m = monster.get_monster_at(x, y)
      if m and m:status("in your thrall")
         and tier_one_demons[m:desc():lower()] ~= nill then
        have_t1 = true
        t1_desc = m:desc()
        break
      end
    end
  end
  if have_t1 then
    crawl.formatted_mpr("Really eat with the " .. t1_desc .. " in view?",
                        "prompt")
    local res = crawl.getch()
    if not (string.char(res) == "y" or string.char(res) == "Y") then
      crawl.formatted_mpr("Okay, then.", "prompt")
      return
    end
  end
  crawl.sendkeys("e")
end

----------------------
---- End safe eat ----
----------------------

-----------------------------
---- Begin Char Defaults ----
-----------------------------

function save_default_target_skill(quiet)
  combo = you.race() .. you.class()
  if c_persist.char_defaults
     and c_persist.char_defaults[combo]
     and c_persist.char_defaults[combo].target_skill == nill then
      c_persist.char_defaults[combo].target_skill = c_persist.target_skill
    if not quiet then
      dmpr("Set default target skill for " .. combo .. ": "
           .. c_persist.target_skill)
    end
  end
  
end

function save_char_defaults(quiet)
  combo = you.race() .. you.class()
  if not c_persist.char_defaults then
    c_persist.char_defaults = { }
  end
  if not c_persist.char_defaults[combo] then
    c_persist.char_defaults[combo] = { }
  end
  skill_msg = ""
  glyph_map = { [1] = "+", [2] = "*" }
  for _,sk in ipairs(skill_list) do
    if you.train_skill(sk) > 0 then
      c_persist.char_defaults[combo][sk] = you.train_skill(sk)
      if skill_msg ~= "" then
        skill_msg = skill_msg .. ";"
      end
      skill_msg = skill_msg .. sk .. ":" .. glyph_map[you.train_skill(sk)]
    else
      c_persist.char_defaults[combo][sk] = nill
    end
  end
  c_persist.char_defaults[combo]["target_skill"] = nill
  if not need_target_skill and c_persist.target_skill ~= nill then
    c_persist.char_defaults[combo]["target_skill"] = c_persist.target_skill
    skill_msg = skill_msg .. ";target:" .. c_persist.target_skill
  end
  if not quiet then
    dmpr("Saved default for " .. combo .. ": " .. skill_msg)
  end
end

function have_defaults()
  combo = you.race() .. you.class()
  return c_persist.char_defaults and c_persist.char_defaults[combo]
end

function load_char_defaults(quiet)
  if not have_defaults() then
    return
  end
  combo = you.race() .. you.class()
  skill_msg = ""
  glyph_map = { [1] = "+", [2] = "*" }
  for _,sk in ipairs(skill_list) do
    if c_persist.char_defaults[combo][sk] then
      you.train_skill(sk, c_persist.char_defaults[combo][sk])
      if skill_msg ~= "" then
        skill_msg = skill_msg .. ";"
      end
      skill_msg = skill_msg .. sk .. ":"
                  .. glyph_map[c_persist.char_defaults[combo][sk]]
    else
      you.train_skill(sk, 0)
    end
  end
  if c_persist.char_defaults[combo]["target_skill"] then
    c_persist.target_skill = c_persist.char_defaults[combo]["target_skill"]
    skill_msg = skill_msg .. ";Target:" .. c_persist.target_skill
    need_target_skill = false
    record_current_skills(c_persist.target_skill)
  elseif init_target_skill then
    -- Called by target_skill() trigger setting a skill target. We call it here
    -- here since setting it skips the skills menu, which we don't want that.
    -- This means the call to char_defaults() should come before target_skill()
    -- in ready()
    init_target_skill()
  end
  if not quiet and skill_msg ~= "" then
    dmpr("Loaded default for " .. combo .. ": " .. skill_msg)
  end
end

function char_defaults(quiet)
  if you.turns() ~= 0 then
      return
  end

  if need_target_skill == nill then
    load_char_defaults(quiet)
  end
  if need_target_skill ~= nill and not have_defaults() then
    save_char_defaults(quiet)
  end
end

---------------------------
---- End Char Defaults ----
---------------------------

--------------------------
---- Begin Char Dumps ----
--------------------------

-- Make a char dump every 1k turns.
local dump_count = you.turns()
function char_dump()
  if you.turns() >= dump_count then
    dump_count = dump_count + 1000
    crawl.dump_char()
  end
end

------------------------
---- End Char Dumps ----
------------------------

function ready()

  -- Enable char default skills; this must come before target_skill()
  char_defaults()

  -- Enable persistant messages
  load_message()

  -- Enable skill target settings
  target_skill()

  -- Dynamic force-mores.
  do_force_mores()

  -- Char dumps every 1k turns.
  char_dump()

  -- Enable RandomTiles.
  random_tile()
end

}

####################
### Autoinscribe ###
####################

autoinscribe += (bad|dangerous)_item.*potion:!q
autoinscribe += potion.*(berserk rage|strong poison):!q
autoinscribe += (bad|dangerous)_item.*scroll:!r
autoinscribe += of faith:!P
autoinscribe += ( rod ):!a
autoinscribe += manual of:!d
autoinscribe += staff of (Wucad Mu|energy|channeling|wizardry|power|conjuration|summoning):!a
autoinscribe += (bread|meat) ration:!e
autoinscribe += scroll.+of.*(acquirement|vulnerability|summoning|teleportation|silence|fear|magic mapping|holy word|torment):!r
autoinscribe += potion.+of (might|brilliance|cancellation|cure mutation|restore abilities|magic|resistance|haste|invisibility|porridge):!q

: if you.god() == "Fedhas" then
autoinscribe += fruit:!e
: end

#########
# Notes #
#########

note_items    += acquirement, of Zot
note_messages += You pass through the gate
note_messages += cast .* Abyss
note_messages += Your scales start
note_messages += protects you from harm
note_messages += You fall through a shaft
note_monsters += orb of fire, ancient lich, caustic shrike, octopode crusher

###################
# Message colours #
###################

### standard colours to be used for message highlighting
$danger   := lightred
$warning  := yellow
$boring   := darkgrey
$item_dmg := $danger

msc := message_colour
msc =

# Multi-turn
channel.multiturn = mute

# Allies
msc += mute:returns to your side
msc += mute:a demon appears
msc += mute:puff of smoke
msc += mute:carefully avoids
msc += mute:is recalled
msc += mute:wall.*burn.*your
msc += mute:dissolves? into (sparkling lights|shadows)
msc += mute:you swap places
msc += mute:your.*(looks stronger|shudders|resists)
msc += mute:(stumbles backwards|holds.*ground)
msc += mute:(something|your).*(misses|does no damage)
msc += mute:your.*(blinks|safely over|gestures)
msc += mute:(phases out.*|misses) (your|something).*
msc += mute:your.*but does no damage
msc += mute:your.*(picks up|drops)
msc += mute:your.*basks in the mutagenic energy

msc += mute:constricts?.*no damage

# Prayer
channel.pray += mute

# Jiyva
: if you.god() == "Jiyva" then
msc += mute:slurping|squelching
msc += mute:splits in two
msc += mute:You feel.*(less hungry|power returning|better)
: end

# Interface
msc += mute:Cast which spell\? \(
msc += mute:^Casting.*
msc += mute:Confirm with \. or Enter, or press \? or \* to list all spells\.
msc += mute:Press\: \? - help, Shift-Dir - straight line, f - you
msc += mute:for a list of commands and other information
msc += mute:melds.*
msc += mute:Switching to.*
msc += mute:Switching back.*

# Other
msc += mute:This raw flesh tastes terrible
msc += mute:melds into your body
msc += mute:begins to bleed from.*wounds
msc += mute:writhes in agony as.*flesh
msc += mute:An air elemental.*itself.*the air
msc += mute:You feel a.*surge of power
msc += mute:Your legs become a tail as you enter the water
msc += mute:You cannot train any new skill

# Default colours
msc += $danger:drains you
msc += $danger:feel drained
msc += $danger:strangely unstable
msc += $danger:curare-tipped.*hits you
msc += $danger:Space warps.* around you
msc += $danger:Space bends around you
msc += $danger:sense of stasis
msc += $danger:clumsily bash
msc += $danger:goes berserk
msc += $danger:Forgetting.* will destroy the book
msc += $danger:The blast of calcifying dust hits you
msc += $danger:You are engulfed in calcifying dust
msc += $danger:is moving more slowly
msc += $danger:^It .* you
msc += $danger:You block its attack
msc += $danger:constricts you
msc += $danger:you convulse
msc += $danger:You feel a build-up of mutagenic energy

msc += $item_dmg:rots? away

msc += $warning:ticking.*clock
msc += $warning:dying ticks
msc += $warning:distant snort
msc += $warning:odd grinding sound
msc += $warning:creaking of ancient gears
msc += $warning:floor suddenly vibrates
msc += $warning:a sudden draft
msc += $warning:coins.*counted
msc += $warning:tolling.*bell
msc += $warning:roar of battle
msc += $warning:creaking.*oriflamme
msc += $warning:oriflamme is probably
msc += $warning:wave of frost
msc += $warning:crackling.*melting
msc += $warning:hiss.*sand
msc += $warning:sound.*rushing water
msc += $warning:rusting.*drain
msc += $warning:drain falling apart
msc += $warning:oppressive heat
msc += $warning:rumble.*avalanche of rocks
msc += $warning:crackle.*arcane power
msc += $warning:crackle.*magical portal
msc += $warning:fails to return
msc += $warning:no longer ripe

msc += $boring:You start (resting|waiting)
msc += $boring:Unknown command
msc += $boring:but (do no|doesn't do any) damage
msc += $boring:(prevent|prevents) you from hitting

#####################
### More messages ###
#####################

more := force_more_message

# Important features
: if you.god() == "Ashenzari" then
more += You have a vision of.*gates?
: else
more += interdimensional caravan
more += distant snort
more += Found a gateway leading out of the Abyss
: end
more += Found .* abyssal rune of Zot
more += You feel a terrible weight on your shoulders

# Interrupts
more += You don't.* that spell
more += You fail to use your ability
more += You miscast
more += You can't (read|drink|do) that
more += That item cannot be evoked
more += This wand has no charges
more += You are held in a net
more += You have disarmed
more += You don't have any such object
more += do not work when you're silenced
more += You can't unwield
more += enough magic points
more += You feel your control is inadequate

# Bad things
more += Your surroundings flicker
more += sense of stasis
more += You cannot teleport right now
more += The writing blurs in front of your eyes
more += You fall through a shaft
more += A huge blade swings out and slices into you
more += (blundered into a|invokes the power of) Zot
more += Ouch! That really hurt!
more += dispelling energy hits you
more += You convulse
more += You are (blasted|electrocuted)!
more += You are.*(confused|poisoned)
more += wrath finds you
more += lose consciousness
more += Space warps horribly around you
more += hits you.*distortion
more += Space bends around you\.
more += watched by something
more += The dungeon rumbles around
more += The air twists around and violently strikes you in flight

# Expiring effects
more += You feel yourself slow down
more += You are starting to lose your buoyancy
more += Your hearing returns
more += Your transformation is almost over
more += You feel yourself come back to life
more += uncertain

# Others
more += You have reached level
more += You have finished your manual of
more += Deactivating autopickup

## Problematic monsters
more += (giant eyeball|flayed ghost|greater mummy|mummy priest|hell sentinel|fiend|tormentor|hellion|lich|executioner|orb of fire|moth of wrath|ghost moth|curse toe|curse skull|draconian shifter).*into view

## Uniques
more += (Agnes|Aizul|Antaeus|Asmodeus|Asterion|Azrael|Blork the orc|Boris|Cerebov|Crazy Yiuf|Dispater|Dissolution|Donald|Dowan|Duvessa|Edmund|the Enchantress|Ereshkigal|Erica|Erolcha|Eustachio|Fannar|Frances|Frederick|Gastronok|Geryon|Gloorx Vloq|Grinder|Grum|Harold|Ignacio|Ijyb|Ilsuiw|Jessica|Jorgrun|Jory|Joseph|Josephine|Khufu|Kirke|Lamia|the Lernaean hydra|Lom Lobon|Louise|Mara|Margery|Maud|Maurice|Menkaure|Mennas|Mnoleg|Murray|Natasha|Nergalle|Nessos|Nikola|Norris|Pikel|Plog|Polyphemus|Prince Ribbit|Psyche|Purgy|Robin|Roxanne|the royal jelly|Rupert|Saint Roka|the Serpent of Hell|Sigmund|Snorg|Sonja|Terence|Tiamat|Urug|Vashnia|Wiglaf|Xtahua).*into view

###################
### Spell slots ###
###################

# Buff/utility/escape spells we always try to put on specific letters.
# Uses following letters: aeghijlmrsBEKU
spell_slot += Abjuration:jJA
spell_slot += Aura of abjuration:jJA
spell_slot += Apportation:aAP
spell_slot += Blink:KBI
spell_slot += Borgnjor's revivification:BNV
spell_slot += Cigotuvi's Embrace:ige
spell_slot += Condensation shield:ihe
spell_slot += Control teleport:ECT
spell_slot += Controlled blink:ieC
spell_slot += Cure poison:ieP
spell_slot += Death's door:DOT
spell_slot += Deflect missiles:rRM
spell_slot += Flight:lLF
spell_slot += Haste:hHA
spell_slot += Invisibility:ivI
spell_slot += Phase shift:ieP
spell_slot += Mass abjuration:jJA
spell_slot += Ozocubu's armour:mMO
spell_slot += Passage of golubria:gei
spell_slot += Recall:eER
spell_slot += Regeneration:geG
spell_slot += Repel missiles:rRM
spell_slot += Ring of flames:meF
spell_slot += Shroud of golubria:ihg
spell_slot += Silence:SIC
spell_slot += Song of slaying:giS
spell_slot += Stoneskin:ieS
spell_slot += Swiftness:sST
spell_slot += Sublimation of blood:BMN
spell_slot += Summon butterflies:UBT


# All other spells
# Use z for L1 damage/buff spells
# Generic: bodkqvwy
# Uses the following for specific schools, preferably is spell name contains it
# or as a fallback if it doesn't.
# Fire: f; Cold: c; Necromancy: n; Earth: t; Poison: p; Summoning: u; Hexes: x
spell_slot += Alistair's intoxication:tox
spell_slot += Airstrike:ktT
spell_slot += Agony:yno
spell_slot += Animate dead:ndt
spell_slot += Animate skeleton:nkt
spell_slot += Beastly appendage:zbt
spell_slot += Blade hands:bdB
# Try to put bolt spells on b
spell_slot += Bolt of cold:bco
spell_slot += Bolt of draining:bnd
spell_slot += Bolt of fire:bfo
spell_slot += Bolt of magma:bof
spell_slot += Call canine familiar:fuc
spell_slot += Call imp:puc
spell_slot += Cause fear:xcf
spell_slot += Corona:zox
spell_slot += Chain lightning:tcn
spell_slot += Cigutovi's embrace:vtn
spell_slot += Confusing touch:oxc
spell_slot += Confuse:ocf
spell_slot += Conjure flame:ofu
spell_slot += Control undead:not
spell_slot += Corpse rot:otn
spell_slot += Dazzling spray:ydz
spell_slot += Darkness:DAR
spell_slot += Discord:DOC
spell_slot += Disjunction:dox
spell_slot += Dispel undead:ndp
spell_slot += Dispersal:dxp
spell_slot += Dragon form:dof
spell_slot += Dragon's call:dou
## gone in 0.17
spell_slot += Enslavement:vxt
spell_slot += Ensorcelled hibernation:zbx
spell_slot += Fire storm:fot
spell_slot += Fireball:fbd
spell_slot += Flame tongue:zfo
spell_slot += Force lance:ofc
## gone in 0.17
spell_slot += Forcefull dismissal:dou
spell_slot += Freezing cloud:cdo
spell_slot += Freeze:zcf
spell_slot += Fulminant prism:ptf
spell_slot += Gell's Gravitas:vxt
spell_slot += Glaciate:ctb
spell_slot += Haunt:unt
spell_slot += Hydra form:ydo
spell_slot += Ice form:cof
spell_slot += Ice storm:cot
spell_slot += Iron shot:ton
spell_slot += Infusion:ofn
spell_slot += Inner flame:fxn
spell_slot += Irradiate:tdI
spell_slot += Iskenderun's battlesphere:kdb
spell_slot += Iskenderun's mystic blast:byd
spell_slot += Leda's Liquefaction:qtx
spell_slot += Lee's rapid deconstruction:tdo
spell_slot += Lehudib's crystal spear:tyb
spell_slot += Lightning bolt:bot
spell_slot += Magic dart:zdt
spell_slot += Malign gateway:wyt
spell_slot += Mass confusion:oxc
spell_slot += Mephitic cloud:pdc
spell_slot += Metabolic englaciation:cob
spell_slot += Monstrous menagerie:uot
spell_slot += Necromutation:ntN
spell_slot += Orb of destruction:odb
spell_slot += Ozocubu's refrigeration:coz
spell_slot += Pain:znp
spell_slot += Passwall:wpP
spell_slot += Petrify:yxt
spell_slot += Poison arrow:pwo
spell_slot += Poisonous cloud:pod
spell_slot += Portal projectile:otc
spell_slot += Sandblast:zbt
spell_slot += Searing ray:ybn
spell_slot += Shadow creatures:wdu
spell_slot += Shatter:TSH
spell_slot += Shock:zok
spell_slot += Simulacrum:cnu
## gone in 0.17
spell_slot += Singularity:ytu
spell_slot += Slow:wox
spell_slot += Spectral weapon:wox
spell_slot += Spellforged servitor:vto
spell_slot += Spider form:pdS
spell_slot += Static discharge:tdc
spell_slot += Statue form:toS
spell_slot += Sticks to snakes:tkc
spell_slot += Sticky flame:yfk
spell_slot += Sting:zpt
spell_slot += Stone arrow:wto
spell_slot += Summon demon:dou
spell_slot += Summon forest:ouf
spell_slot += Summon greater demon:dou
spell_slot += Summon guardian golem:dou
spell_slot += Summon horrible things:bou
spell_slot += Summon hydra:ydu
spell_slot += Summon ice beast:bcu
spell_slot += Summon lightning spire:tpu
spell_slot += Summon mana viper:vpu
spell_slot += Summon small mammal:zou
## gone in 0.17
spell_slot += Sure blade:bdu
spell_slot += Teleport other:opt
spell_slot += Throw frost:cow
spell_slot += Throw flame:fow
spell_slot += Throw icicle:cwo
spell_slot += Tornado:TOD
spell_slot += Tukima's Dance:dkx
spell_slot += Vampiric draining:vnd
spell_slot += Venom bolt:bpo
spell_slot += Warp weapon:wop

# Default letters
spell_slot += .*:YXWZ

##################
### Item slots ###
##################

## rings ##
item_slot += .*ring of (dexterity|evasion) : eE
item_slot += ring of .*fire : Ff
item_slot += ring of flight : L
item_slot += ring of (ice|protection from cold) : Cc
item_slot += .*ring of intelligence : iI
item_slot += ring of invisibility : I
item_slot += ring of magical power : Ww
item_slot += ring of poison resistance : P
item_slot += ring of positive energy : Nn
item_slot += ring of protection from magic : Mm
item_slot += ring of see invisible : V
item_slot += .*ring of (slaying|strength) : Ss
item_slot += ring of stealth : Qq
item_slot += ring of sustain abilities : X
item_slot += ring of teleportation : T
item_slot += ring of teleport control : E
item_slot += ring of wizardry : Zz

## amulets ##
item_slot += amulet of clarity : Y
item_slot += amulet of gourmand : Dd
item_slot += amulet of guardian spirit : Dd
item_slot += amulet of regeneration : G
item_slot += amulet of rage : B
item_slot += amulet of resist corrosion : O
item_slot += amulet of resist mutation : U
item_slot += amulet of stasis : A
item_slot += amulet of faith : H
item_slot += amulet of warding : R

item_slot += inaccuracy|loudness : Jj

## item_slot

###################
## Debug Options ##
###################

fsim_rounds = 10000
